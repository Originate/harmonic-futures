// Generated by CoffeeScript 1.6.2
var EventEmitter, Future,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

EventEmitter = require('events').EventEmitter;

require('harmony-reflect');

Future = (function() {
  Future.prototype.isFuture = true;

  function Future(fn) {
    this.fn = fn;
    this.proxy_methods = __bind(this.proxy_methods, this);
    this.setThis = __bind(this.setThis, this);
    this.finished = __bind(this.finished, this);
    this.done = __bind(this.done, this);
    this.event_emitter = new EventEmitter;
    this.is_done = false;
    this.fn(this.finished);
    return Proxy(Function, this.proxy_methods());
  }

  Future.prototype.done = function(callback) {
    var _this = this;

    if (this.is_done) {
      return process.nextTick(function() {
        return callback.apply({}, _this.saved_args);
      });
    } else {
      return this.event_emitter.on('done', callback);
    }
  };

  Future.prototype.finished = function(err, data) {
    if (this.is_done) {
      throw new Error("Callback fired more than once");
    } else {
      this.is_done = true;
      this.saved_args = [err, data];
      return this.event_emitter.emit('done', err, data);
    }
  };

  Future.prototype.setThis = function(obj) {
    return this["this"] = obj;
  };

  Future.prototype.proxy_methods = function() {
    var _this = this;

    return {
      apply: function(target, thisArg, args) {
        return new Future(function(callback) {
          return _this.done(function(err, data) {
            return callback(err, data.apply(_this["this"], args));
          });
        });
      },
      get: function(target, name, receiver) {
        var future;

        if (_this[name]) {
          return _this[name];
        }
        future = new Future(function(callback) {
          return _this.done(function(err, data) {
            future.setThis(data);
            return callback(err, data[name]);
          });
        });
        return future;
      },
      set: function(target, name, val, receiver) {
        return _this.done(function(err, data) {
          return data[name] = val;
        });
      }
    };
  };

  return Future;

})();

module.exports = Future;
